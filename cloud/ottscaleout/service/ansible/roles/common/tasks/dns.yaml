# Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
#
# Licensed under the Universal Permissive License v 1.0 as shown
# at http://oss.oracle.com/licenses/upl

- name: get dns search paths
  shell:            "cat {{ opchome }}/{{ scriptdir }}/resolv.conf"
  register:         searchpaths
  delegate_to:      localhost
  when:             initdone.stat.exists == false

- name: create directory to avoid warning
  file:
    state:     directory
    path:      "/root/.ansible/tmp"
    owner:     root
    group:     root
    mode:      0700
    recurse:   true
  become:           true
  become_user:      root

- name: add search paths to resolv.conf
  replace:
    path:           "/etc/resolv.conf"
    regexp:         '(\s+)search(\s+.*)?$'
    replace:        '\n{{ searchpaths.stdout }}'
  become:           true
  become_user:      root
  when:             initdone.stat.exists == false
    
- name: set dhcp client hook to add searchpaths to resolv.conf
  copy: 
    content:        "#!/bin/sh"
    dest:           "/etc/dhcp/dhclient-exit-hooks.d/resolv.conf.sh"
    force:          true
    owner:          root
    group:          root
    mode:           0700
  become:           true
  become_user:      root
  when:             initdone.stat.exists == false

- name: set up dhcp-client exit hook to restore resolv.conf on reboot
  lineinfile:
    path:           "/etc/dhcp/dhclient-exit-hooks.d/resolv.conf.sh"
    line:           "echo \"{{ item }}\" >> /etc/resolv.conf"
    state:          present
    create:         true
    owner:          root
    group:          root
    mode:           0700
  with_items:       "{{ searchpaths.stdout_lines }}"
  become:           true
  become_user:      root
  when:             initdone.stat.exists == false

- name: remove directory created to avoid warning
  file:
    state:     absent
    path:      "/root/.ansible"
  become:           true
  become_user:      root

- name: issue#3 make sure connecting works before proceeding
  shell:            /usr/bin/python "{{ opchome }}/{{ scriptdir }}/gethosts.py" "{{ inventory_file }}" zookeeper-addresses mgmt-addresses db-addresses client-addresses
  register:         somehosts
  when:             initdone.stat.exists == false and inventory_hostname in groups['bastion-hosts']
  
- name: try connecting for "{{ 10 * (10 * (groups['db-addresses'] | length)) }}" seconds (1)
  command:          ssh -o StrictHostKeyChecking=no {{ item }} /usr/bin/ls "{{ opchome }}"
  register:         canconnect
  until:            canconnect.rc == 0
  retries:          "{{ 10 * (groups['db-addresses'] | length) }}"
  delay:            10
  with_items:       "{{ somehosts.stdout }}"
  when:             initdone.stat.exists == false and inventory_hostname in groups['bastion-hosts']

- name: try connecting for "{{ 10 * (10 * (groups['db-addresses'] | length)) }}" seconds (2)
  command:          ssh -o StrictHostKeyChecking=no {{ item }} /usr/bin/ls "{{ opchome }}"
  register:         canconnect
  until:            canconnect.rc == 0
  retries:          "{{ 10 * (groups['db-addresses'] | length) }}"
  delay:            10
  with_items:       "{{ somehosts.stdout }}"
  when:             initdone.stat.exists == false and inventory_hostname in groups['bastion-hosts']
#
